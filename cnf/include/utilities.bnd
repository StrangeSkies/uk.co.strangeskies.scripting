## Requirement shorthand
req: osgi.identity;filter:='(&(osgi.identity=${1})(version${if;${is;${2};null};>=0;${2}}))'

######################
## Embedded bundles ##
######################

# Override with list of bundle dependencies to embed in the generated bundle
# version=latest
embedded.bundles:
embedded.projects:

# Override with list of bundle dependencies to shade into the generated bundle
# version=latest
shaded.bundles:
shaded.projects:

# Override with the classpath location of embedded jars
embed.target: jar

jarsource.latest: ${repo;${1};latest}
jarsource.project: ${repo;${1};snapshot}
jardestination: ${embed.target}/${1}.jar

embed.bundle: ${jardestination;${1}}=${jarsource.latest;${1}}
embed.project: ${jardestination;${1}}=${jarsource.project;${1}}
shade.bundle: @${jarsource.latest;${1}}
shade.project: @${jarsource.project;${1}}

-includeresource.embedded: \
	${map;embed.bundle;${embedded.bundles}},\
	${map;embed.project;${embedded.projects}},\
	${map;shade.bundle;${shaded.bundles}},\
	${map;shade.project;${shaded.projects}}

Embedded-Runpath: ${map;jardestination;${join;${embedded.bundles};${embedded.projects}}}

# for extracting the filename from a path or uri
filename.uri: ${first;${split;\\?;${first;${split;#;${last;${split;/;${1}}}}}}}
filename.uri.noext: ${first;${split;\\.;${filename.uri;${1}}}}
filename: ${filename.uri;${fileuri;${1}}}
filename.noext: ${filename.uri.noext;${fileuri;${1}}}
