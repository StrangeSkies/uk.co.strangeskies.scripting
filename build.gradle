/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

/* Add bnd gradle plugin as a script dependency */
buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath bndPlugin
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    classpath 'org.jacoco:org.jacoco.agent:0.7.8'
  }
}

plugins {
    id 'com.gradle.build-scan' version '1.6'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file(".gradle-wrapper/gradle-wrapper.jar")
  gradleVersion = "3.4"
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf).setOffline(gradle.startParameter.offline)

ext.cnf = rootProject.project(bnd_cnf)

/* Configure the subprojects */
def bndProjects() {
  return subprojects.findAll {
    bndWorkspace.getProject(it.name) != null && new File(it.projectDir, "src").exists()
  }
}

configure(bndProjects()) {
  plugins.apply "biz.aQute.bnd"
}

/* Test Configuration */
configure(bndProjects()) {
  apply plugin: 'jacoco'

  repositories {
    mavenCentral()
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      html.enabled false
    }
  }
}

/* Source License Generation */
def copyrightProperties  = new Properties()
rootProject.file("copyright.properties").withReader("UTF-8") { reader ->
  copyrightProperties.load(reader)
}
apply plugin: "license"
configure(bndProjects()) {
  apply plugin: "license"

  license {
    header rootProject.file("LICENSE-TEMPLATE")

    strictCheck = true
    encoding = "UTF-8"

    ext."copyright.work.name" = project.name
    ext."copyright.year" = Calendar.getInstance().get(Calendar.YEAR)
    ext."copyright.holder.name" = copyrightProperties."copyright.holder.name"
    ext."copyright.holder.email" = copyrightProperties."copyright.holder.email"
    ext."copyright.holder.logo" = copyrightProperties."copyright.holder.logo"

    mapping {
      java = "SLASHSTAR_STYLE"
    }
  }
}
